/*
 * Mitchell Pon
 * Period 1
 * This code will calculate varies mathmatical functions listed below in the method names
 */

public class Calculate {

	public static double square(double number) { // finds the input to the power of 2
		double answer;//number  = the inputted number
		answer = number *number;
		return answer;
	
	}
	
	public static int cube(int number){ //number  = the inputted number which will be to the power of 3
		int answer;
		answer = number*number*number;
		return answer;
	}
	
	public static double average (double x,double y){ //finds the average of two doubles
		double averageanswer;
		double addingtogether;
		addingtogether = x + y; //adds the two inputted numbers togetber
		averageanswer  = addingtogether/2;// divides them to find the the average of the two numbers
		return averageanswer;
	}
	public static double average (double inputnumber, double otherinput, double inputofinputs){ //finds the average out of three numbers
		// all the int, double, double above are bascially just like x y z
			double avg;
			double addingtogether;
			addingtogether = inputnumber + otherinput + inputofinputs;
			avg  = addingtogether/3;
			return avg;
	}
	public static double toDegrees(double input) { // converts radians to degrees
		double degrees = input*180/3.14159; /*
		the formula on how to find radians via precal

		*/
		return degrees;
		
	}public static double toRadians(double input){// converts degrees to radians
	double degrees = input/180*3.14159;//the formula on how to find radians via precal
	return degrees;

	
	}public static double discriminant(double a, double b, double c){
		double answerofa = (b*b)-4*a*c; //the discrimnant formal in a nutshell
		return answerofa;
	
	}public static String toImproperFrac(int a, int b, int c){// converts numbers into improper fractions
		
		int addthemup = (a*c)+b; 
		
		String numberAsString = addthemup +"/" + c;
		return numberAsString;
	
	}public static String toMixedNum (int a, int j){// finds the improper fraction to a mixed number
		
		double firstnumb = a/j;
		int firstnumb1 = (int)firstnumb;
		int numb = a%j;
		if(numb == 0){
			String finalMixed2 = firstnumb1 +"";
			return finalMixed2;
	
		}else{
			String finalMixed = firstnumb1 + "_" + numb + "/" + j;
			return finalMixed;
		
		}
		
	}public static String foil (int a, int b, int c, int d, String n){ //this finds the a^2x + bx + c
		int varA = a*c;
		int varB = a*d+b*c;
		int varC = b*d;
		if (varC >0&&varB>0){
			String foils = varA+n+"^2 + "+varB+n+" + "+varC;// inputting the numbers into a string statement with "variables"
			return foils;
		}else if (varC<0){
			varC = (int) absValue(varC);
		String foils = varA+n+"^2 + "+varB+n+" - "+varC;// inputting the numbers into a string statement with "variables"
		return foils;
		}
	else if (varB<0){
		varB = (int) absValue(varB);
		String foils = varA+n+"^2 - "+varB+n+" + "+varC;// inputting the numbers into a string statement with "variables"
		return foils;
	}else{
		varB = (int) absValue(varB);
		varC = (int) absValue(varC);
		String foils = varA+n+"^2 - "+varB+n+" - "+varC;// inputting the numbers into a string statement with "variables"
		return foils;
	}
	
		
	}public static boolean isDivisibleBy( int DivInput, int Divinputt){//finds if the number is divisble with returing remainders
		if(Divinputt<=0){
			throw new IllegalArgumentException ("Negative Found");}
		int newnumb = DivInput%Divinputt; 
		
		// if both numbers have remainders, that means there will be decimals 
		// when dividing
		if (newnumb  == 0){
			return true;
		}else{
			return false;
		}
	}

	public static double absValue(double number){ //finds the abs value
		//VV bascially changes the value to a positive number
		if(number<0){
		double number1 = number * -1;
		return number1;
	}else{
		return number;
		
		}
	}
	public static int max(int Trump, int HRC){	// finds the max out of 2 numbers
		// i had a bit of fun on this one, Trump is the first integer and HRC is the second
		if(Trump>HRC){
			System.out.println("Trump is greater!!!");
			System.out.println("My Easter egg!");
		return Trump;
		}else{
			System.out.println("Trump is still great, despite he is less!");
			System.out.println("My Easter egg!");
			return HRC;
		}
	}
	
	public static double max(double Trump, double HRC,double GaryJ){ //finds the max numbers out of three inputs
		/* each political candidate(that is actually decent, Jill Stein is illeginmate here)
		 * represents a number/int
		 * 
		 */
	 int nothing = 0;// political easter eggs :D
		if(Trump>GaryJ && Trump>HRC){
			//System.out.println("Trump is greater!!!");
		return Trump;
		}else if(HRC>GaryJ && Trump>HRC){
			//System.out.println("Trump is still great, despite he is less!");
			return HRC;
		}else if (Trump<GaryJ && GaryJ>HRC){
		//System.out.println("America is saved!");
			return GaryJ;
		
		}
		return nothing; //zero
		}
		public static int min(int i, int k){	
			if(i<k){
				//System.out.println("Trump is greater!!!");
			return i;
			}else{
				//System.out.println("Trump is still great, despite he is less!");
				return k;
			}
		}
		public static double round2(double a){ //rounds the number to 2 decimals
			double b = a * 100.0; //to isolate the integers we need by making them whole
			double y = b +.5;//java doesnt round so we do
			y = (int)y; //casted to a int to elminate the decimal places
			double answer = y/100.0;// to return it to the orignal value
			return answer;
		}
		public static double exponent(double inter, int powerto){ // find the number to the certain power
			double inter1 = 1;
			if(inter<=0){
				throw new IllegalArgumentException ("Negative Found");}
			for(int i=1; i<=powerto; i++){
			inter1 = inter1*inter; 
// loop that stops multiplying inter to itself when the powerto
		}return inter1;
		
}

		public static int factorial(int beingfac) { // it does math like 5! = such and such
			int intial1 = 1;
			if(beingfac<0){
				throw new IllegalArgumentException ("Negative Found");
				
			}else{
			for(int intial = beingfac; beingfac>0; intial--){
				intial1 = intial1*(intial);       
			//will subtract one from itself and multiply the next number till zero (doesnt multply zero though)
				
			}
			return intial1;
			}
		
			
		}
		public static boolean isPrime(int n) { // finds the prime number
		    for(int i=2;i<n;i++) {
		        if(n%i==0)
		        	// any remainder means it is not prime
		            return false;
		    }
		    return true;
		    
		  
		}
		public static int gcf(int a, int b){ //finding the greatest common factor
		while(a!=0 && b!=0){
		 int c = b;
		    b = a%b;
		    a = c; }
				return (int) Calculate.absValue(a+b);
		}

		public static double sqrt(double unsqt){ //converting numbers to their sqrt roots
			if(unsqt<=0){
				throw new IllegalArgumentException ("Negative Found"); //cannot be a negative
				}
			
			double qsqrt = Math.sqrt(unsqt);
			return qsqrt;
			
			
			
		}
		public static String quadForm(int a, int b, int c){ //This is the quadratic Formula calculator method
			double aa = (double)a;
			double bb = (double)b;
			double cc = (double)c
;			double discrmin = discriminant(aa,bb,cc);
			if (discrmin < 0){
				return "no real roots";
			}else{
				double root1 = (-b)+ sqrt(discrmin)/(2*(aa));  // Both of these root1 and root2 is similiar to
				double root2 = (-b)- sqrt(discrmin)/(2*(aa));  // the regular quad formula
				if (root1==root2){
					int newroot1 = (int) round2(root1); //get rid of the long decimals that are not needed
					String finalrootboth = Integer.toString(newroot1);// well, we need to return a string
					return finalrootboth; // or add + "" to make it a string and eliminate the line beforehand
				}
				double newroot2 = round2(root2);
				double newroot1 = round2(root1);
				//String finalroot1 = Integer.toString(newroot1);
				//String finalroot2 = Integer.toString(newroot2);
				return newroot1 + "  and " + newroot2;
			}
			
		}
}
	
		

	
		
		