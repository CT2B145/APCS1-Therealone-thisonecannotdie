
/*
 * Mitchell Pon 
 * 11/21/16
 * 1*
 * 
 * 
 * 
 * 
 */
package fracCalc;
 
import java.util.Arrays;
import java.util.Scanner;
 
public class FracCalc {
 
    public static void main(String[] args) 
    {   
    System.out.println("Enter your equation, but please add spaces between the operator and the fraction");
    Scanner reader = new Scanner(System.in); //Getting input
//        // Reading from System.in
    String input = reader.nextLine();
     
        //System.out.println(produceAnswer("1/2 / 3/4")); // test file
        System.out.println(produceAnswer(input));
    }
     
    // ** IMPORTANT ** DO NOT DELETE THIS FUNCTION.  This function will be used to test your code
    // This function takes a String 'input' and produces the result
    //
    // input is a fraction string that needs to be evaluated.  For your program, this will be the user input.
    //      e.g. input ==> "1/2 + 3/4"
    //        
    // The function should return the result of the fraction after it has been calculated
    //      e.g. return ==> "1_1/4"
    public static String produceAnswer(String input){ //job is to parse the fractions into an array from the inputted stirng
        //====================================================//
            String[] fracEquationHolder = input.split(" "); // holds the fractions and operator
            String operand1 = fracEquationHolder[0];
            String operator = fracEquationHolder[1];
            String operand2 = fracEquationHolder[2];                 
            operand1 = operand1.trim();
            operator = operator.trim();
            operand2 = operand2.trim(); 
          //====================================================//   
          int[]operatand1 =  parse(operand1); //sends to convert to ints
          int[]operatand2 =  parse(operand2); //sends to convert to ints
        //====================================================//  
       if(input.indexOf(" + ")>=0||input.indexOf(" - ")>=0){ //sends to add or subtract
       return addsubtract(operatand1,operatand2,operand1, operand2, operator);
       
    }  else if(input.indexOf(" * ")>=0||input.indexOf(" / ")>=0){ // sends to divide or multiply
       return multiplydivide(operatand1,operatand2,operand1, operand2, operator);
 
    }  else {
        return "Error: Input is the wrong format";
    }
         //
           
    //    return (Arrays.toString(test)); 
 
//           
//               }
//               //return statement3 + ("(Whole:" + whole +" Numerator:" + num +" Denominator:" + dem + ")");
//               return answer; 
         
    }
public static int[] parse(String inputFraction){ // changes string input to ints
 
        if((inputFraction.indexOf("_")>=0)&&(inputFraction.indexOf("/")>=0)){//when there is a whole number
           String[] split2 = inputFraction.split("_");
           String wholetemp;
           wholetemp = split2[0];
           String frac = split2[1];
           String[] split3 = frac.split("/");
           String numtemp;
           String demtemp;
           numtemp = split3[0];
           demtemp = split3[1];
            
 
          int whole = Integer.parseInt(wholetemp);
          int num = Integer.parseInt(numtemp);        
          int dem = Integer.parseInt(demtemp);
        return toImproperFrac(whole,num,dem);
 
       } else if (inputFraction.indexOf("/")>=0){
          String[] split3 = inputFraction.split("/");
          String numtemp = split3[0];
          String demtemp = split3[1];
           
          int[] threePartsofFrac = new int[3];
          int whole = 0;
          int num = Integer.parseInt(numtemp);        
          int dem = Integer.parseInt(demtemp);
           
          threePartsofFrac[0] = whole;
          threePartsofFrac[1] = num;
          threePartsofFrac[2] = dem;
        return threePartsofFrac;
           
       }else{
          String whole = inputFraction;
          int[] threePartsofFrac = new int[3];;
          int wholeInt = Integer.parseInt(whole);
          threePartsofFrac[0] = 0;
          threePartsofFrac[1] = wholeInt;
          threePartsofFrac[2] = 1;
          return threePartsofFrac;
       }
     //  return statement3 + ("(Whole:" + whole +" Numerator:" + num +" Denominator:" + dem + ")"); 
}
 
public static String multiplydivide(int[] operand1,int[] operand2, String op1, String op2,String operator){
    int[] zeAnswerNumer = new int[3]; // holds the final answer variables
    zeAnswerNumer[0] = 0; //whole number place holder
    if(operator.indexOf("*")>=0){
        zeAnswerNumer[1] = operand1[1]*operand2[1]; 
        zeAnswerNumer[2] = operand1[2]*operand2[2];
        int finalnum = zeAnswerNumer[1];
        int finaldem = zeAnswerNumer[2];
        int absnum = Math.abs(finalnum);
        int absdem = Math.abs(finaldem);
            if(finaldem == 1){
                String numer = Integer.toString(finalnum);
                return numer;
            }else if(finalnum ==0){//if there is a zero in the numerator, its zero overall
                String numer = Integer.toString(finalnum);
                return numer;
            } else if( finaldem == finalnum){
                return "1";
            } else if(absnum>absdem){
            	return toMixedNum(finalnum,finaldem);
            } else if(absnum<absdem&&finalnum<0){
            	return "-"+gcf(finalnum,finaldem);
            } return gcf(finalnum,finaldem); 
    }else if(operator.indexOf("/")>=0){
        zeAnswerNumer[1] = operand1[1]*operand2[2]; 
        zeAnswerNumer[2] = operand1[2]*operand2[1];
        int finalnum = zeAnswerNumer[1];
        int finaldem = zeAnswerNumer[2]; 
        int absnum = Math.abs(finalnum);
        int absdem = Math.abs(finaldem);
            if(finaldem == 1){
                String numer = Integer.toString(finalnum);
                return numer;
            }else if(finalnum ==0){//if there is a zero in the numerator, its zero overall
                String numer = Integer.toString(finalnum);
                return numer;
            } else if( finaldem == finalnum){
                return "1";
            } else if(absnum>absdem){
            	return toMixedNum(finalnum,finaldem);
            } else if(absnum<absdem&&finalnum<0){
            	return "-"+gcf(finalnum,finaldem); 
            } return gcf(finalnum,finaldem);
    	}
	return "something went wrong";
}
 
public static String addsubtract(int[] operand1,int[] operand2, String op1, String op2,String operator){ //adds or subtracts numbers
    int[] zeAnswerNumer = new int[3]; // holds the final answer variables
    zeAnswerNumer[0] = 0; //whole number place holder
    if((operator.indexOf("+")>=0)){ // if there is an addition sign, it will add
            if(operand1[2] == operand2[2]){//checks to see if denominators are the same
                zeAnswerNumer[1] = operand1[1]+operand2[1]; 
                int finalnum = zeAnswerNumer[1];
                int finaldem = operand1[2];
                int absnum = Math.abs(finalnum);
                int absdem = Math.abs(finaldem);
                    if(finaldem == 1){
                        String numer = Integer.toString(finalnum);
                        return numer;
                    }else if(finalnum ==0){//if there is a zero in the numerator, its zero overall
                        String numer = Integer.toString(finalnum);
                        return numer;
                    } else if( finaldem == finalnum){
                        return "1";
                    } else if(absnum>absdem){
                    	return toMixedNum(finalnum,finaldem);
                    } else if(absnum<absdem&&finalnum<0){
                    	return "-"+gcf(finalnum,finaldem);
                    } return gcf(finalnum,finaldem); 
            
            }else{ //creates the same denominator for both fractions
                zeAnswerNumer[2] = operand2[2]*operand1[2];
                operand1[1] = operand1[1]*operand2[2];  
                operand2[1] = operand2[1]*operand1[2];  
                zeAnswerNumer[1] = operand1[1]+operand2[1];
                int finalnum = zeAnswerNumer[1];
                int finaldem = zeAnswerNumer[2];
                int absnum = Math.abs(finalnum);
                int absdem = Math.abs(finaldem);
                 if(finalnum ==0){
                        String numer = Integer.toString(finalnum);
                        return numer;
                 } else if(absnum>absdem){
                 	return toMixedNum(finalnum,finaldem);
                 } else if(absnum<absdem&&finalnum<0){
                 	return "-"+gcf(finalnum,finaldem);
                 } return gcf(finalnum,finaldem); 
         	}
             
    }else if((operator.indexOf("-")>=0)){ //subratraction
            if ((op1.indexOf("-")>=0)&&(op2.indexOf("-")>=0)){
                if(operand1[2] == operand2[2]){
                    zeAnswerNumer[1] = operand1[1]+(operand2[1]*-1);
                    int finalnum = zeAnswerNumer[1];
                    int finaldem = operand1[2]; 
                    int absnum = Math.abs(finalnum);
                    int absdem = Math.abs(finaldem);
                        if(finaldem == 1){
                            String numer = Integer.toString(finalnum);
                            return numer;
                        }
                        if(finalnum ==0){ //if there is a zero in the numerator, its zero overall
                            String numer = Integer.toString(finalnum);
                            return numer;
                        } else if( finaldem == finalnum){
                            return "1";
                        } else if(absnum>absdem){
                        	return toMixedNum(finalnum,finaldem);
                        } else if(absnum<absdem&&finalnum<0){
                        	return "-"+gcf(finalnum,finaldem);
                        } return gcf(finalnum,finaldem); 
             
                }else{//creates the same denominator for both fractions
                    zeAnswerNumer[2] = operand2[2]*operand1[2];
                    operand1[1] = operand1[1]*operand2[2];  
                    operand2[1] = operand2[1]*operand1[2];  
                    zeAnswerNumer[1] = operand1[1]+(operand2[1]*-1);
                    int finalnum = zeAnswerNumer[1];
                    int finaldem = zeAnswerNumer[2];
                    int absnum = Math.abs(finalnum);
                    int absdem = Math.abs(finaldem);
                     if(finalnum ==0){ //if there is a zero in the numerator, its zero overall
                            String numer = Integer.toString(finalnum);
                            return numer;
                     } else if( finaldem == finalnum){
                            return "1";
                     } else if(absnum>absdem){
                     	return toMixedNum(finalnum,finaldem);
                     } else if(absnum<absdem&&finalnum<0){
                     	return "-"+gcf(finalnum,finaldem);
                     } return gcf(finalnum,finaldem); 
             	}
            }else if ((op1.indexOf("-")>=0)){ // checks to see if there is a negative in the first operand
                if(operand1[2] == operand2[2])
                        zeAnswerNumer[1] = operand1[1]-operand2[1];
                        int finalnum = zeAnswerNumer[1];
                        int finaldem = operand1[2]; 
                        int absnum = Math.abs(finalnum);
                        int absdem = Math.abs(finaldem);
                            if(finaldem == 1){
                                String numer = Integer.toString(finalnum);
                                return numer;
                            }
                            if(finalnum ==0){//if there is a zero in the numerator, its zero overall
                                String numer = Integer.toString(finalnum);
                                return numer;
                            } else if( finaldem == finalnum){
                                return "1";
                            } else if(absnum>absdem){
                            	return toMixedNum(finalnum,finaldem);
                            } else if(absnum<absdem&&finalnum<0){
                            	return "-"+gcf(finalnum,finaldem);
                            } return gcf(finalnum,finaldem); 
                    	
                }else{//creates the same denominator for both fractions
                    zeAnswerNumer[2] = operand2[2]*operand1[2];
                    operand1[1] = operand1[1]*operand2[2];  
                    operand2[1] = operand2[1]*operand1[2];  
                    zeAnswerNumer[1] = operand1[1]-operand2[1];
                    int finalnum = zeAnswerNumer[1];
                    int finaldem = zeAnswerNumer[2];
                    int absnum = Math.abs(finalnum);
                    int absdem = Math.abs(finaldem);
                        if(finalnum ==0){//if there is a zero in the numerator, its zero overall
                            String numer = Integer.toString(finalnum);
                            return numer;
                        } else if( finaldem == finalnum){
                            return "1";
                        } else if(absnum>absdem){
                        	return toMixedNum(finalnum,finaldem);
                        } else if(absnum<absdem&&finalnum<0){
                        	return "-"+gcf(finalnum,finaldem);
                        } return gcf(finalnum,finaldem); 
                	}
            }else if ((op2.indexOf("-")>=0)){ // checks to see if there is a negative in the sencond operand
                if(operand1[2] == operand2[2]){
                    zeAnswerNumer[1] = operand1[1]+operand2[1];
                    int finalnum = zeAnswerNumer[1];
                    int finaldem = operand1[2]; 
                    int absnum = Math.abs(finalnum);
                    int absdem = Math.abs(finaldem);
                        if(finaldem == 1){
                            String numer = Integer.toString(finalnum);
                            return numer;
                        }
                        if(finalnum ==0){//if there is a zero in the numerator, its zero overall
                            String numer = Integer.toString(finalnum);
                            return numer;
                        } else if( finaldem == finalnum){
                            return "1";
                        } else if(absnum>absdem){
                        	return toMixedNum(finalnum,finaldem);
                        } else if(absnum<absdem&&finalnum<0){
                        	return "-"+gcf(finalnum,finaldem);
                        } return gcf(finalnum,finaldem); 
                    
                }else{
                    zeAnswerNumer[2] = operand2[2]*operand1[2];
                    operand1[1] = operand1[1]*operand2[2];  
                    operand2[1] = operand2[1]*operand1[2];  
                    zeAnswerNumer[1] = operand1[1]-operand2[1];
                    int finalnum = zeAnswerNumer[1];
                    int finaldem = zeAnswerNumer[2];
                    int absnum = Math.abs(finalnum);
                    int absdem = Math.abs(finaldem);
                        if(finalnum ==0){//if there is a zero in the numerator, its zero overall
                            String numer = Integer.toString(finalnum);
                            return numer;
                        } else if( finaldem == finalnum){
                            return "1";
                        } else if(absnum>absdem){
                        	return toMixedNum(finalnum,finaldem);
                        } else if(absnum<absdem&&finalnum<0){
                        	return "-"+gcf(finalnum,finaldem);
                        } return gcf(finalnum,finaldem); 
                }
            }else{//if there are no negatives
                if(operand1[2] == operand2[2]){ // if there is the same denominator
                zeAnswerNumer[1] = operand1[1]-operand2[1];
                int finalnum = zeAnswerNumer[1];
                int finaldem = operand1[2]; 
                int absnum = Math.abs(finalnum);
                int absdem = Math.abs(finaldem);
                    if(finaldem == 1){
                        String numer = Integer.toString(finalnum);
                        return numer;
                    }
                    if(finalnum ==0){//if there is a zero in the numerator, its zero overall
                        String numer = Integer.toString(finalnum);
                        return numer;
                    } else if( finaldem == finalnum){
                        return "1";
                    } else if(absnum>absdem){
                    	return toMixedNum(finalnum,finaldem);
                    } else if(absnum<absdem&&finalnum<0){
                    	return "-"+gcf(finalnum,finaldem);
                    } return gcf(finalnum,finaldem); 
            }
                 
     //just in case something does goes wrong
      }
	return "somethinwent wrong";
} // this is the last bracket
 
public static int[] toImproperFrac(int whole, int num, int dem){        // converts mixed numbers into improper fraction
      int[] threePartsofFrac = new int[3];
     if (whole<0){ //checks to see if there is a negative
      num = (whole*dem)+(num*-1); 
      threePartsofFrac[0] = 0;
      threePartsofFrac[1] = num;
      threePartsofFrac[2] = dem;
      return threePartsofFrac;
 
    }else{
        num = (whole*dem)+(num);  
        threePartsofFrac[0] = 0;
         threePartsofFrac[1] = num;
         threePartsofFrac[2] = dem;
         return threePartsofFrac;
    }
         
}public static String gcf(int a, int b){ //finding the greatest common factor
	int num = a;
	int dem = b;
	
	while(a!=0 && b!=0){
		 int c = b;
		    b = a%b;
		    a = c; }
		int gcf = (a+b);
		num = num/gcf;
		dem = dem/gcf;
		num = Math.abs(num);
		dem = Math.abs(dem);
	return num+"/"+dem;
		
		}
public static String toMixedNum (int a, int j){// finds the improper fraction to a mixed number
	
	double firstnumb = a/j;
	int firstnumb1 = (int)firstnumb;
	int numb = a%j;
	if(numb == 0){
		String finalMixedwhole = firstnumb1 +"";
		return finalMixedwhole;
	}else if(numb<0&&j<0){
		numb = Math.abs(numb);
		j = Math.abs(j);
		
		String finalMixed = firstnumb1 + "_" + gcf(numb,j);
		return finalMixed;
	}else{
		String finalMixed = firstnumb1 + "_" + gcf(numb,j);
		return finalMixed;
	
	}
}
}
    // TODO: Fill in the space below with any helper methods that you think you will need
    